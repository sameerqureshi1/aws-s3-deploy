name: AWS CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # üß± 1. BUILD JOB
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Optional: build step for JS frameworks
      - name: Build project
        run: |
          if [ -f package.json ]; then
            npm install
            npm run build || echo "No build script found, skipping build."
          else
            echo "No build needed, skipping build."
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .

  # üß™ 2. TEST JOB
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi

      - name: Run tests
        run: |
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No test script found, skipping tests."
          fi

  # üöÄ 3. DEPLOY JOB
  deploy:
    name: Deploy to AWS S3
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create S3 bucket if not exists
        run: |
          # ü™£ Use a globally unique bucket name to avoid conflicts
          BUCKET_NAME=sameerqureshi-aws-ci-cd-${{ github.run_id }}
          REGION=${{ secrets.AWS_REGION }}

          echo "Using bucket name: $BUCKET_NAME"

          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "‚úÖ Bucket exists, skipping creation."
          else
            echo "ü™£ Bucket not found. Creating..."
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET_NAME" \
                --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi

            echo "Enabling static website hosting..."
            aws s3 website s3://$BUCKET_NAME --index-document index.html --error-document error.html
            echo "‚úÖ Bucket created and configured!"
          fi

          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Sync files to S3
        run: |
          echo "Syncing files to S3 bucket: $BUCKET_NAME"
          aws s3 sync . s3://$BUCKET_NAME --delete
          echo "‚úÖ Files synced!"

      # üåç OPTIONAL: Make bucket publicly readable
      - name: Make bucket public
        run: |
          echo "Applying public read access policy to $BUCKET_NAME"
          aws s3api put-bucket-policy --bucket "$BUCKET_NAME" --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'"$BUCKET_NAME"'/*"
              }
            ]
          }'
          echo "‚úÖ Bucket policy applied ‚Äî your site is now public."

      - name: Print website URL
        run: |
          REGION=${{ secrets.AWS_REGION }}
          echo "üåê Website URL:"
          echo http://$BUCKET_NAME.s3-website-$REGION.amazonaws.com

